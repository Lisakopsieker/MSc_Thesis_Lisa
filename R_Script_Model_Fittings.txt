# Nonlinear regression model fitting
# MSc Thesis Lisa Kopsieker
# Submitted 29th August 2019

# load required packages
library(ggplot2)

# graph original nni output (using example UK case study)
UK_plot<-ggplot(UK_nni_site, aes(y=NNI, x=SEQ)) +  
  geom_point(size=1.0) +
  theme_classic() + labs(title= "UK", x="Sequence", y="NNI") +
  theme(axis.title.x = element_text(size = 12), axis.text.x = element_text(size = 12),
        axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
print(UK_plot) # print plot
      
# assign x and y values using previously created dataframe from NNI_analysis
y = UK_nni_asc$NNI
x = UK_nni_asc$sequence

# linear model
m1 <- lm(y ~ x) # create model
summary(m1) # model summary
coef(m1) # get coefficients
b0 <-  0.832770303 # assign coefficients
b1 <- -0.002362197 
AIC(m1) # AIC value for model

# generate model y values (for linear plot)
m1_y <- b0 + b1 * x
m1df <- data.frame(m1_y, x)   # turn into dataframe

# plot method 1
pm1 <- ggplot(data = m1df, aes(x = x, y = m1_y)) +
  geom_line(data = data.frame(x, y), aes(x = x, y = y)) +   # original data line
  geom_point(data = data.frame(x, y), aes(x = x, y = y)) +  # original data points
  geom_line(colour = 'red') +   # print line for model
  labs(title = "UK | Linear", x="Sequence", y="NNI")
print(pm1)    # print plot

# plot method 2
UK_plot_linear <- ggplot(UK_nni_asc, aes(sequence, NNI)) + #another option of modelling and graphing in one
  geom_point() + theme_classic() +
  geom_smooth(method = "lm", 
              formula = y ~ x,
              method.args = list(start = list(b0 = 1, b1 = 1)),
              se=FALSE, colour = 'red') +
  labs(title = "UK | Linear", x="Sequence", y="NNI") +
  theme(axis.title.x = element_text(size = 12), axis.text.x = element_text(size = 12),
        axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
print(UK_plot_linear) # print plot

# logarithmic
m2 <- nls(y ~ I(b0 + (b1 * log(x))), data.frame(x, y), start = list(b0 = 1, b1 = 1)) # create model
summary(pm2) # model summary
coef(m2)['b0'] # assign coefficients
coef(m2)['b1']
AIC(m2) # get AIC value

# generate model y values (for logarithmic plot)
m2_y <- coef(m2)['b0'] + (coef(m2)['b1']*log(x))
m2df <- data.frame(m2_y, x)   # turn into dataframe

# plot method 1
pm2 <- ggplot(data = m2df, aes(x = x, y = m2_y)) +
  geom_line(data = data.frame(x, y), aes(x = x, y = y)) +   # original data points
  geom_line(colour = 'red') +
  labs(title = "UK | Logarithmic", x="Sequence", y="NNI") # print line for model
print(pm2)    # print plot

# plot method 2
UK_plot_log <- ggplot(UK_nni_asc, aes(sequence, NNI)) + 
  geom_point() + geom_line() +
  geom_smooth(method = "nls", 
              formula = y ~ I(b0 + (b1 * log(x))),
              method.args = list(start = list(b0 = 1, b1 = 1)),
              se=FALSE, colour = 'red') +
  labs(title = "UK | Logarithmic", x="Sequence", y="NNI")
print(UK_plot_log) # print plot


# cubic (third degree polynomial) model
m3 <- nls(y ~ I(b0 + (b1 * x + b2 * (x^2) + b3 * (x^3))), data.frame(x, y), 
  start = list(b0 = 1, b1 = 1, b2 = 1, b3 = 1)) # create model
summary(m3) # model summary
coef(m3)['b0'] # assign coefficients
coef(m3)['b1']
coef(m3)['b2']
coef(m3)['b3']
AIC(m3) # get AIC value

# generate model y values (for cubic plot)
m3_y <- coef(m3)['b0'] + (coef(m3)['b1']*x) + (coef(m3)['b2']*(x^2)) + (coef(m3)['b2']*(x^3))
m3df <- data.frame(m3_y, x)   # turn into dataframe

# plot method 1
pm3 <- ggplot(data = m3df, aes(x = x, y = m3_y)) +
  geom_line(data = data.frame(x, y), aes(x = x, y = y)) +   # original data points
  geom_line(colour = 'red') +
  labs(title = "UK | Cubic", x="Sequence", y="NNI") # print line for model
print(pm2)    # print plot

# plot method 2
UK_plot_cubic <- ggplot(UK_nni_site, aes(SEQ, NNI)) + 
  geom_point() + theme_classic() +
  geom_smooth(method = "lm", 
              formula = y ~ x + I(x^2) + I(x^3),
              method.args = list(start = list(b0 = 1, b1 = 1)),
              se=FALSE, colour = 'red') +
  labs(title = "UK | Cubic", x="Sequence", y="NNI") +
  theme(axis.title.x = element_text(size = 12), axis.text.x = element_text(size = 12),
        axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
print(UK_plot_cubic) # print plot

# power model
m4 <- nls(y ~ I(b0 * x^b1), data.frame(x, y), start = list(b0 = 1, b1 = 1)) # create model
summary(m4) #model summary
coef(m4)['b0'] # assign coefficients
coef(m4)['b1']
AIC(m4) # get AIC value

# generate model y values (for power plot)
m4_y <- coef(m4)['b0'] * (x ^ coef(m4)['b1'])
m4df <- data.frame(m4_y, x)   # turn into dataframe

# plot method 1
pm4 <- ggplot(data = m4df, aes(x = x, y = m4_y)) +
  geom_line(data = data.frame(x, y), aes(x = x, y = y)) +   # original data line
  geom_point(data = data.frame(x, y), aes(x = x, y = y)) +  # original data points
  geom_line(colour = 'red') +
  labs(title = "UK | Power", x="Sequence", y="NNI")# Print line for model
print(pm4)    # print plot

# plot method 2
UK_plot_power <- ggplot(UK_nni_asc, aes(sequence, NNI)) + 
  geom_point() + geom_line() +
  geom_smooth(method = "nls", 
              formula = y ~ I(b0 * x^b1),
              method.args = list(start = list(b0 = 1, b1 = 1)),
              se=FALSE, colour = 'red') +
  labs(title = "UK | Power", x="Sequence", y="NNI")
print(UK_plot_power) # print plot

# compound model
m5 <- nls(y ~ I(b0 * b1^x), data.frame(x, y), start = list(b0 = 1, b1 = 1)) # create model 
summary(m5) # model summary
coef(m5)['b0'] # assign coefficients
coef(m5)['b1']
AIC(m5) # get AIC value

# generate model y values (for compound plot)
m5_y <- coef(m5)['b0'] * (coef(m5)['b1'] ^ x)
m5df <- data.frame(m5_y, x)   # turn into dataframe

# plot method 1
pm5 <- ggplot(data = m5df, aes(x = x, y = m5_y)) +
  geom_line(data = data.frame(x, y), aes(x = x, y = y)) +   # original data line
  geom_point(data = data.frame(x, y), aes(x = x, y = y)) +  # original data points
  geom_line(colour = 'red') +
  labs(title = "UK | Compound", x="Sequence", y="NNI") # Print line for model
print(pm5)    # print plot

# plot method 2
UK_plot_compound <- ggplot(UK_nni_asc, aes(sequence, NNI)) + 
  geom_point() + geom_line() +
  geom_smooth(method = "nls", 
              formula = y ~ I(b0 * b1^x),
              method.args = list(start = list(b0 = 1, b1 = 1)),
              se=FALSE, colour = 'red') +
  labs(title = "UK | Compound", x="Sequence", y="NNI")
print(UK_plot_compound) # print plot

# inverse model
m6 <- nls(y ~ I(b0 + (b1/x)), data.frame(x, y), start = list(b0 = 0, b1 = 0)) # create model
summary(m6) # model summary
coef(m6)['b0'] # assign coefficients
coef(m6)['b1']
AIC(m6) # get AIC value

# generate model y values (for inverse plot)
m6_y <- coef(m6)['b0'] * (coef(m6)['b1']/x)
m6df <- data.frame(m6_y, x)   # turn into dataframe

# plot method 1
pm6 <- ggplot(data = m6df, aes(x = x, y = m6_y)) +
  geom_line(data = data.frame(x, y), aes(x = x, y = y)) +   # original data line
  geom_point(data = data.frame(x, y), aes(x = x, y = y)) +  # original data points
  geom_line(colour = 'red') +
  labs(title = "UK | Inverse", x="Sequence", y="NNI")# Print line for model
print(pm6)    # print plot

# plot method 2
UK_plot_inverse <- ggplot(UK_nni_asc, aes(sequence, NNI)) + 
  geom_point() + geom_line() +
  geom_smooth(method = "nls", 
              formula = y ~ I(b0 + (b1/x)),
              method.args = list(start = list(b0 = 1, b1 = 1)),
              se=FALSE, colour = 'red') +
  labs(title = "UK | Inverse", x="Sequence", y="NNI")
print(UK_plot_inverse) # print plot

# s-curve model
m7 <- nls(y ~ I(exp(b0 + b1/x)), data.frame(x, y), start = list(b0 = 1, b1 = 1)) # create model
summary(m7) # model summary
coef(m7)['b0'] #nassign coefficients
coef(m7)['b1']
AIC(m7) #mget AIC value

# generate model y values (for s-curve plot)
m7_y <- exp(coef(m7)['b0']) + (coef(m7)['b1']/x)
m7df <- data.frame(m7_y, x)   # turn into dataframe

# plot method 1
pm7 <- ggplot(data = m7df, aes(x = x, y = m7_y)) +
  geom_line(data = data.frame(x, y), aes(x = x, y = y)) +   # original data line
  geom_point(data = data.frame(x, y), aes(x = x, y = y)) +  # original data points
  geom_line(colour = 'red') +
  labs(title = "UK | S-Curve", x="Sequence", y="NNI")# Print line for model
print(pm7)    # print plot

# plot method 2
UK_plot_scurve <- ggplot(UK_nni_asc, aes(sequence, NNI)) + 
  geom_point() + theme_classic() +
  geom_smooth(method = "nls", 
              formula = y ~ I(exp(b0 + b1/x)),
              method.args = list(start = list(b0 = 1, b1 = 1)),
              se=FALSE, colour = 'red') +
  labs(title = "UK | S-Curve", x="Sequence", y="NNI") + 
  theme(axis.title.x = element_text(size = 12), axis.text.x = element_text(size = 12),
        axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
print(UK_plot_scurve) # print plot

# growth model
m8 <- nls(y ~ I(exp(b0 + b1*x)), data.frame(x, y), start = list(b0 = 1, b1 = 1)) # create model
summary(m8) # model summary
coef(m8)['b0'] # assign coefficients
coef(m8)['b1']
AIC(m8) # get AIC value

# generate model y values (for growth plot)
m8_y <- exp(coef(m8)['b0']) + (coef(m8)['b1']*x)
m8df <- data.frame(m8_y, x)   # turn into dataframe

# plot method 1
pm8 <- ggplot(data = m8df, aes(x = x, y = m8_y)) +
  geom_line(data = data.frame(x, y), aes(x = x, y = y)) +   # original data line
  geom_point(data = data.frame(x, y), aes(x = x, y = y)) +  # original data points
  geom_line(colour = 'red') +
  labs(title = "UK | Growth", x="Sequence", y="NNI")# Print line for model
print(pm8)    # print plot

# plot method 2
UK_plot_growth <- ggplot(UK_nni, aes(sequence, NNI)) + 
  geom_point() + 
  geom_smooth(method = "nls", 
              formula = y ~ I(exp(b0 + (b1*x))),
              method.args = list(start = list(b0 = 1, b1 = 1)),
              se=FALSE, colour = 'red') +
  labs(title = "UK | Growth", x="Sequence", y="NNI")
print(UK_plot_growth) # print plot

#exponential model
m9 <- nls(y ~ I(b0 * exp(b1*x)), data.frame(x, y), start = list(b0 = 0, b1 = 0)) # create model
summary(m9) # model summary
coef(m9)['b0'] # assign coefficients
coef(m9)['b1']
AIC(m9) # get AIC value

# generate model y values (for exponential plot)
m9_y <- exp(coef(m9)['b0']) * exp(coef(m9)['b1']*x)
m9df <- data.frame(m9_y, x)   # turn into dataframe

# plot method 1
pm9 <- ggplot(data = m9df, aes(x = x, y = m9_y)) +
  geom_line(data = data.frame(x, y), aes(x = x, y = y)) +   # original data line
  geom_point(data = data.frame(x, y), aes(x = x, y = y)) +  # original data points
  geom_line(colour = 'red') +
  labs(title = "UK | Exponential", x="Sequence", y="NNI")# Print line for model
print(pm9)    # print plot

# plot method 2
UK_plot_exp <- ggplot(UK_nni, aes(sequence, NNI)) + 
  geom_point() + 
  geom_smooth(method = "nls", 
              formula = y ~ I(exp(b0 + exp(b1*x))),
              method.args = list(start = list(b0 = 1, b1 = 1)),
              se=FALSE, colour = 'red') +
  labs(title = "UK | Exponential", x="Sequence", y="NNI")
print(UK_plot_exp) # print plot

# quadratic model
m10 <- nls(y ~ I(b0 + (b1 * x + b2 * (x^2))), data.frame(x, y), start = list(b0 = 1, b1 = 1, b2 = 1)) # create model
summary(m10) # model summary
coef(m10)['b0'] # assign coefficients
coef(m10)['b1']
coef(m10)['b2']
AIC(m10) # get AIC value

# generate model y values (for exponential plot)
m10_y <- exp(coef(m10)['b0']) + (coef(m10)['b1']*x) + (coef(m10)['b2']*(x^2))
m10df <- data.frame(m10_y, x)   # turn into dataframe

# plot method 1
pm10 <- ggplot(data = m10df, aes(x = x, y = m10_y)) +
  geom_line(data = data.frame(x, y), aes(x = x, y = y)) +   # original data line
  geom_point(data = data.frame(x, y), aes(x = x, y = y)) +  # original data points
  geom_line(colour = 'red') +
  labs(title = "UK | Quadratic", x="Sequence", y="NNI")# Print line for model
print(pm10)    # print plot

#plot method 2
UK_plot_quad <- ggplot(UK_nni_asc, aes(sequence, NNI)) + 
  geom_point() + theme_classic() +
  geom_smooth(method = "lm", 
              formula = y ~ x + I(x^2),
              method.args = list(start = list(b0 = 1, b1 = 1, b2 = 1)),
              se=FALSE, colour = 'red') +
  labs(title = "UK | Quadratic", x="Sequence", y="NNI") +
  theme(axis.title.x = element_text(size = 12), axis.text.x = element_text(size = 12),
        axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
print(UK_plot_quad) # print plot


# plot all nni graphs in one
library("cowplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("ggpubr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
total_plot <- ggarrange(UK_plot, Flanders_plot, Finland_plot, Catalunya_plot,
          ncol = 2, nrow = 2)
print(total_plot)

# export plot
png("Plot1.png", width = 9, height = 7, units = 'in', res = 300)
plot(total_plot) # make plot
dev.off()
 
